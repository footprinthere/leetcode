from collections import defaultdict


class Solution:
    def largestDivisibleSubset(self, nums: list[int]) -> list[int]:
        """time 5 / space 6 :("""

        nums = [1] + sorted(nums)  # 맨 앞에 1 추가 (다른 모든 node로 연결되는 root)
        graph = Graph()

        for t, n in enumerate(nums[1:], start=1):
            for s in reversed(range(t)):
                if n % nums[s] == 0 and not graph.is_connected(s, t):
                    graph.add(s, t)

        # print(graph.graph)
        # print()
        # print(graph.incoming)

        return [nums[i] for i in graph.longest_path()]


class Graph:
    def __init__(self):
        self.graph = defaultdict(list)
        # edge (i -> j) : nums[i] | nums[j]
        self.incoming = defaultdict(set)
        # nums[i]를 향해 이동할 수 있는 node들

    def add(self, src: int, dst: int):
        self.graph[src].append(dst)
        self.incoming[dst].update(self.incoming[src] | {src})

    def is_connected(self, src: int, dst: int) -> bool:
        return src in self.incoming[dst]

    def longest_path(self) -> list[int]:
        stack = [(0, [])]  # 첫 번째 원소는 1이므로 포함 안 함
        longest = []

        while stack:
            u, path = stack.pop()
            if len(self.graph[u]) == 0:
                if len(path) > len(longest):
                    longest = path
                continue

            for v in self.graph[u]:
                stack.append((v, path + [v]))

        return longest


if __name__ == "__main__":
    # fmt: off
    # nums = [1, 2, 3]
    # nums = [1, 2, 4, 8]
    # nums = list(range(1, 11))
    # nums = list(range(1, 101))
    nums = [468,400,596,994,843,686,573,435,868,320,598,237,407,641,947,463,323,91,149,755,628,635,918,413,250,188,272,997,513,799,816,264,746,162,106,783,86,892,2,929,563,952,165,970,592,432,915,905,933,669,532,567,938,296,168,125,920,517,989,718,332,253,493,710,579,602,859,164,903,23,133,494,485,917,760,741,201,428,767,365,286,841,839,802,830,556,134,434,723,978,143,673,908,744,624,766,260,526,140,371,976,660,131,716,212,910,340,627,259,467,97,417,648,4,550,81,727,880,224,751,787,319,374,553,578,251,692,322,973,20,333,103,735,545,74,874,343,489,809,906,807,889,510,464,473,135,985,377,64,587,420,385,559,439,70,14,174,966,730,247,72,931,680,232,358,585,40,141,391,281,77,96,613,901,230,949,277,646,887,696,30,798,487,451,811,416,258,607,315,638,546,898,574,390,316,570,392,665,356,644,305,191,273,988,806,76,150,817,393,801,707,614,438,511,11,542,900,327,111,643,127,999,66,725,655,337,616,845,656,241,185,461,334,703,311,785,100,37,178,429,789,858,167,422,923,891,612,267,99,456,728,142,220,410,937,254,499,683,287,10,496,528,527,771,418,954,382,276,225,1000,726,33,79,491,118,745,844,406,748,921,794,492,292,814,208,930,823,778,702,543,548,119,395,73,632,120,105,711,963,630,145,837,825,631,317,138,274,130,697,204,304,362,981,5,904,123,752,512,869,824,341,280,853,261,349,338,41,652,256,478,530,959,838,85,262,551,65,266,454,557,961,732,301,653,154,307,623,854,960,894,18,474,951,38,875,238,523,425,302,231,233,107,193,519,408,846,881,913,504,856,248,265,640,591,594,43,852,821,597,934,866,827,882,450,995,836,840,68,695,777,942,90,436,558,729,344,447,671,290,110,600,58,405,885,619,202,804,104,498,379,161,440,820,795,571,444,394,452,564,688,182,236,94,749,234,829,28,399,625,15,194,370,121,589,173,983,860,484,685,610,376,108,401,217,404,637,678,537,16,621,502,561,55,914,577,389,446,650,848,847,521,924,192,912,943,927,240,957,342,458,318,441,965,996,516,884,791,427,75,369,936,431,865,3,184,772,765,347,112,588,144,471,769,897,470,50,98,810,753,288,228,980,736,218,200,826,639,617,907,285,443,27,547,899,835,126,462,657,549,383,886,935,693,166,246,580,229,152,867,93,300,586,719,742,398,433,636,308,690,289,734,916,535,183,928,116,615,357,651,83,457,12,53,939,977,415,361,506,314,770,792,291,215,747,851,63,35,480,351,175,84,757,396,544,676,71,328,984,170,373,270,309,346,46,7,520,629,877,310,348,593,36,423,102,743,303,412,210,255,658,654,739,19,552,975,326,419,699,815,387,694,509,534,245,986,209,862,115,666,950,486,879,872,80,199,293,525,34,179,850,670,313,397,576,25,793]
    # fmt: on

    answer = Solution().largestDivisibleSubset(nums)
    print(f"{answer = }")
